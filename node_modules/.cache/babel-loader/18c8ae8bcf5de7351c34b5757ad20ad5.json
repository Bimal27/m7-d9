{"ast":null,"code":"var _jsxFileName = \"/Users/bimals/Desktop/strive/Module-4-code/may21-react-router/src/components/Reservations.jsx\",\n    _s = $RefreshSig$();\n\n// for having a state, you need a class\n// 1) we're going to create our empty state, you want to make room for your data\n// 2) we want to prepare our UI for showing the reservations\n// 3) we want to fetch the reservations from the endpoint\n// 4) we want to put them into the state\n// WHAT HAPPENS WHEN YOU REFRESH THE PAGE AND SHOW RESERVATIONS.JSX?\n// 1) STATE GETS INITIALIZED\n// 2) RENDER() FIRES, MAPPING THE EMPTY RESERVATIONS ARRAY (-> not showing anything)\n// 3) COMPONENTDIDMOUNT GETS FIRED\n// initial render\n// componentDidMount\n// another render??!?\n// EVERY TIME YOU CHANGE THE STATE YOU GET RENDER() FIRED AGAIN\n// EVERY TIME YOU GET NEW PROPS YOU GET RENDER() FIRED AGAIN\nimport { Container, ListGroup, Row } from 'react-bootstrap';\nimport Col from 'react-bootstrap/Col';\nimport Loading from \"./Loading\";\nimport Error from \"./Error\"; // import { parseISO, format } from 'date-fns'\n\nimport parseISO from 'date-fns/parseISO';\nimport format from 'date-fns/format';\nimport { useState } from \"react\";\nimport { useEffect } from 'react';\nimport ReservationForm from './ReservationForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reservations = () => {\n  _s();\n\n  // once you create the state for your component, you have to assign an initial value\n  // for a string --> ''\n  // for a number --> 0, 1\n  // for an array --> []\n  // constructor(props) {\n  //     super(props)\n  //     console.log('THIS IS CONSTRUCTOR')\n  //     this.myFunction = this.myFunction.bind(this)\n  // }\n  const [reservations, setReservations] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false); // the perfect place for doing a fetch in a React Component\n  // we need a method that we're sure is going to be called just ONCE\n  // for every lifetime of our component\n\n  useEffect(() => {\n    const fetchReservation = async () => {\n      try {\n        let response = await fetch('https://striveschool-api.herokuapp.com/api/reservation');\n\n        if (response.ok) {\n          // we got the reservations array!\n          // console.log(response)\n          let data = await response.json();\n          setReservations(data);\n          setIsLoading(false);\n          setIsError(false);\n        } else {\n          setIsLoading(false);\n          setIsError(true);\n        }\n      } catch (error) {\n        console.log('BIG ERRORRRR!!', error);\n        setIsLoading(false);\n        setIsError(true);\n      }\n    };\n\n    fetchReservation();\n  }, []); // you want the user to immediately be entertained by some content\n  // after they are presented with something to see, we can do our expensive operations\n  // under the hood, in the componentDidMount\n  // from 2021-11-27T20:00:00.000Z\n  // into Saturday, November the 27th\n  // Date()\n\n  console.log('THIS IS RENDER');\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center my-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"RESERVATIONS GO HERE!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"HERE ARE THE CURRENT RESERVATIONS!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), isError === true && /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 42\n        }, this), isLoading === true ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: reservations.map(r => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [\"From: \", r.name, \" - For: \", r.numberOfPeople, \" - At: \", format(parseISO(r.dateTime), 'dd MMMM yyyy - HH:mm')]\n          }, r._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center my-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(ReservationForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reservations, \"Fh1S27LtBde2rCaQfteL8Tfd1xw=\");\n\n_c = Reservations;\nexport default Reservations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reservations\");","map":{"version":3,"sources":["/Users/bimals/Desktop/strive/Module-4-code/may21-react-router/src/components/Reservations.jsx"],"names":["Container","ListGroup","Row","Col","Loading","Error","parseISO","format","useState","useEffect","ReservationForm","Reservations","reservations","setReservations","isLoading","setIsLoading","isError","setIsError","fetchReservation","response","fetch","ok","data","json","error","console","log","map","r","name","numberOfPeople","dateTime","_id"],"mappings":"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","sourcesContent":["// for having a state, you need a class\r\n\r\n// 1) we're going to create our empty state, you want to make room for your data\r\n// 2) we want to prepare our UI for showing the reservations\r\n\r\n// 3) we want to fetch the reservations from the endpoint\r\n// 4) we want to put them into the state\r\n\r\n\r\n// WHAT HAPPENS WHEN YOU REFRESH THE PAGE AND SHOW RESERVATIONS.JSX?\r\n\r\n// 1) STATE GETS INITIALIZED\r\n// 2) RENDER() FIRES, MAPPING THE EMPTY RESERVATIONS ARRAY (-> not showing anything)\r\n// 3) COMPONENTDIDMOUNT GETS FIRED\r\n\r\n\r\n\r\n// initial render\r\n// componentDidMount\r\n// another render??!?\r\n\r\n// EVERY TIME YOU CHANGE THE STATE YOU GET RENDER() FIRED AGAIN\r\n// EVERY TIME YOU GET NEW PROPS YOU GET RENDER() FIRED AGAIN\r\n\r\nimport { Container, ListGroup, Row } from 'react-bootstrap'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport Loading from \"./Loading\";\r\nimport Error from \"./Error\";\r\n// import { parseISO, format } from 'date-fns'\r\n\r\nimport parseISO from 'date-fns/parseISO'\r\nimport format from 'date-fns/format'\r\nimport { useState } from \"react\";\r\nimport { useEffect } from 'react';\r\n\r\nimport ReservationForm from './ReservationForm'\r\n\r\nconst Reservations = () => {\r\n\r\n    // once you create the state for your component, you have to assign an initial value\r\n    // for a string --> ''\r\n    // for a number --> 0, 1\r\n    // for an array --> []\r\n\r\n    // constructor(props) {\r\n    //     super(props)\r\n    //     console.log('THIS IS CONSTRUCTOR')\r\n    //     this.myFunction = this.myFunction.bind(this)\r\n    // }\r\n\r\n    const [reservations, setReservations] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isError, setIsError] = useState(false)\r\n\r\n\r\n    // the perfect place for doing a fetch in a React Component\r\n    // we need a method that we're sure is going to be called just ONCE\r\n    // for every lifetime of our component\r\n\r\n    useEffect(() => {\r\n        const fetchReservation = async () => {\r\n            try {\r\n                let response = await fetch('https://striveschool-api.herokuapp.com/api/reservation')\r\n                if (response.ok) {\r\n                    // we got the reservations array!\r\n                    // console.log(response)\r\n                    let data = await response.json()\r\n                    setReservations(data)\r\n                    setIsLoading(false)\r\n                    setIsError(false)\r\n                } else {\r\n                    setIsLoading(false)\r\n                    setIsError(true)\r\n                }\r\n            } catch (error) {\r\n                console.log('BIG ERRORRRR!!', error)\r\n                setIsLoading(false)\r\n                setIsError(true)\r\n            }\r\n        }\r\n        fetchReservation()\r\n    }, [])\r\n\r\n    // you want the user to immediately be entertained by some content\r\n    // after they are presented with something to see, we can do our expensive operations\r\n    // under the hood, in the componentDidMount\r\n\r\n    // from 2021-11-27T20:00:00.000Z\r\n    // into Saturday, November the 27th\r\n\r\n    // Date()\r\n\r\n    console.log('THIS IS RENDER')\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-center my-5\">\r\n                <Col xs={12} md={6} className=\"text-center\">\r\n                    <h1>RESERVATIONS GO HERE!</h1>\r\n                    <h3>HERE ARE THE CURRENT RESERVATIONS!</h3>\r\n\r\n                    {isError === true && <Error />}\r\n                    {isLoading === true\r\n                        ? <Loading />\r\n                        : <ListGroup>\r\n                            {reservations.map(r => (\r\n                                <ListGroup.Item key={r._id}>\r\n                                    From: {r.name} - For: {r.numberOfPeople} - At: {format(parseISO(r.dateTime), 'dd MMMM yyyy - HH:mm')}\r\n                                    {/* we want to format dateTime, which is currently a string,\r\n                                    into something more readable */}\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    }\r\n\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"justify-content-center my-5\">\r\n                <Col xs={12} md={6} className=\"text-center\">\r\n                    <ReservationForm />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Reservations"]},"metadata":{},"sourceType":"module"}